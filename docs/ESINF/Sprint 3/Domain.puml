@startuml

class Coordenadas {
    -lat
    -lon

    +getlat()
    +getlon()
}

Coordenadas -- Localidades

class Horario{
    -openTime
    -closeTime

    +getOpenTime()
    +setOpenTime()
    +GetCloseTime()
    +setCloseTime()
}

Horario -- Localidades
Horario -- US_EI02_IdealVerticesForNHubs

class Localidades{
    - numId
    -coordenadas
    -isHub
    -horario

    +getCoordenadas()
    +setCoordenadas()
    +getHorario()
    +setHorario()
}

Localidades -- US_EI01_GraphBuilder
Localidades -- US_EI02_IdealVerticesForNHubs
Localidades -- US_EI03_VehicleRouteAutonomy
Localidades -- US_EI06_PossiblePathsBetweenPoints
Localidades -- US_EI07_DeliveryRouteCalculator
Localidades -- US_EI08_FindDeliveryCircuit
Localidades -- US_EI09_HubNClusters

class LocalityPair {
    -localidades1
    -localidades2

    +toString()
    +equals()
}

LocalityPair -- US_EI06_PossiblePathsBetweenPoints
LocalityPair -- PathInfo

class PathInfo {
    -totalDistance
    -totalTime

    +getTotalDistance()
    +getTotalTime()
    +getIndividualDistances()
}

PathInfo -- US_EI06_PossiblePathsBetweenPoints

class StructurePath{
    -distanciaTotal
    -percurso
    -carregamentos
    -tesmposChegada
    -flag

    +getDistanciaTotal
    +getPercurso()
    +getTemposDeChegada()
    +setTemposDeChegada()
    +isFlag()
    +equals()
}

StructurePath -- US_EI07_DeliveryRouteCalculator

class US_EI01_GraphBuilder{
    +getDistribuição()
    +getInstance()
    +addLocalidades(String numId, Double lat, double lon)
    +addRoute (Localidades orig, Localidades dist, Integer distance)
    +toString()
    +getHubId(String hubId)
}

US_EI01_GraphBuilder -- ReadFiles
US_EI01_GraphBuilder -- US_EI02_IdealVerticesForNHubs
US_EI01_GraphBuilder -- US_EI03_VehicleRouteAutonomy
US_EI01_GraphBuilder -- US_EI04_MinimumSpanningTree

class US_EI02_IdealVerticesForNHubs{
    +calculateInfluence(MapGraph<Localidades, Integer> graph)
    +calculateProximity(MapGraph<Localidades, Integer> graph)
    +calculateVertexProximity(MapGraph<Localidades, Integer> graph, Localidades vertex)
    +calculateCentrality(MapGraph<Localidades, Integer> graph)
    +getTopNHubsSeparate(Map<Localidades, Integer> map, Integer n, boolean isProximity)
    +getTopNMap(Map<Localidades, List<Integer>> map, Integer n)
    +getTopNHubs(Map<Localidades, List<Integer>> map, Integer n)
    +setHubs(Map<Localidades, List<Integer>> topHubs, int n)
    +getMapGraph()
    +getLocalByID(String hubId)
    +escolherHorario(MapGraph<Localidades, Integer> graph)
}

US_EI02_IdealVerticesForNHubs -- US_EI07_DeliveryRouteCalculator
US_EI02_IdealVerticesForNHubs -- US_EI08_FindDeliveryCircuit
US_EI02_IdealVerticesForNHubs -- US_EI09_HubNClusters
US_EI02_IdealVerticesForNHubs -- MapGraph

class US_EI03_VehicleRouteAutonomy{
    +shortestPathBetweenTheTwoLocals(MapGraph<Localidades, Integer> distancesGraph, Integer autonomia)
    +calculateLoadingHubs(List<Localidades> path, MapGraph<Localidades, Integer> distancesGraph, Integer autonomia)
    -calculatePathDistances(List<Localidades> path, MapGraph<Localidades, Integer> distancesGraph)
    +findTwoFarthestHubs(MapGraph<Localidades, Integer> g, LinkedList<Localidades> shortestPath)
    -findHubByNumId(MapGraph<Localidades, Integer> g, String numId)
}

US_EI03_VehicleRouteAutonomy -- MapGraph

class US_EI04_MinimumSpanningTree{
    +getMinimumSpanningTree(MapGraph<Localidades, Integer> graph)
    +calculateTotalHeight(MapGraph<Localidades, Integer> graph)
}

US_EI04_MinimumSpanningTree -- MapGraph

class US_EI06_PossiblePathsBetweenPoints{
    +getPathsBetweenTwoPoints(MapGraph<Localidades, Integer> graph, Localidades startingLocalidades,\n Localidades destinationLocalidades, Integer vehicleAutonomy, double tripAverageSpeed)
    -calculatePathCost(MapGraph<Localidades, Integer> graph, LinkedList<Localidades> path)
    -calculateTotalTime(MapGraph<Localidades, Integer> graph, LinkedList<Localidades> path, double averageSpeed)
    -calculateIndividualDistances(MapGraph<Localidades, Integer> graph, LinkedList<Localidades> path)

}

US_EI06_PossiblePathsBetweenPoints -- MapGraph

class US_EI07_DeliveryRouteCalculator {
    +getPontoPartida(Localidades pontoPartida)
    +calculaMelhorPercurso(Localidades localInicial, LocalTime horaInitial, int autonomia, double velocidade,\n int carregar, int decarregarMercadoria)
    +getTempoFinalCompleto(LinkedList<Localidades> caminhoPercorrido, LocalTime horaComeco, int autonomia,\n double averageVelocity, int tempoRecarga, int tempoDescarga, int numeroDescargas)
    +intToLocalTime(int tempo)
    +getFinishingTimeRoute(int distanciaTotal, double averageVelocity, LocalTime horaComeco)
    +getTimeTable(StructurePath structurePath, LocalTime horaComeco, int autonomia, double averageVelocity,\n int tempoRecarga, int tempoDescarga)
    +getAllHubsInCourse(LinkedList<Localidades> caminho, List<Localidades> locaisVisitados)
    +addTime(LocalTime time1, LocalTime time2)
    +minusTime(LocalTime time1, LocalTime time2)
    +getHubs()
    +getStillOpenHubs(LocalTime hora)
    +analyzeData(int autonomia, LinkedList<Localidades> caminho)
}

US_EI07_DeliveryRouteCalculator -- MapGraph

class US_EI08_FindDeliveryCircuit {
    +findDeliveryCircuit(MapGraph<Localidades, Integer> distancesGraph, int nHubs, int velMedia,\n int autonomia, Localidades localOrigem, int tempoDeDescarga, int tempoDeCarregamento)
    +calcularCaminhoMaisCurto(MapGraph<Localidades, Integer> distancesGraph, \nLocalidades localOrigemVolta, Localidades localOrigem)
    +calculateLoadingHubs(List<Localidades> shortestPath, MapGraph<Localidades,\n Integer> distancesGraph, Integer autonomia, List<Integer> distanceBetweenLocals, List<Integer> totalDistance, \nint tempoDescarga, List<Integer> tempoDescargaVolta)
    +getTopHubs(MapGraph<Localidades, Integer> distancesGraph, int nHubs)
    -extractNumber(String s)
}

US_EI08_FindDeliveryCircuit -- MapGraph

class US_EI09_HubNClusters{
    +getHubs()
    +getClustersFW()
    -calculateEdgePathCounts(MapGraph<Localidades, Integer> graph)
    -areClustersIsolated(MapGraph<Localidades, Integer> graph, Map<Localidades, List<Localidades>> clusters)
    +getClustersD()
}

US_EI09_HubNClusters -- MapGraph

class MapGraph {
    +MapGraph(boolean directed)
    +MapGraph(Graph<V, E> g)
    +validVertex(V vert)
    +adjVertices(V vert)
    +edges()
    +edge(V vOrig, V vDest)
    +outDegree(V vert)
    +inDegree(V vert)
    +outgoingEdges(V vert)
    +incomingEdges(V vert)
    +addVertex(V vert)
    +addEdge(V vOrig, V vDest, E weight)
    +removeVertex(V vert)
    + removeEdge(V vOrig, V vDest)
    +getEdge(V vOrig, V vDest)
    +clone()
    +toString()
}

class MapVertex {
    +MapVertex(V vert)
    +getElement()
    +addAdjVert(V vAdj, Edge<V, E> edge)
    +remAdjVert(V vAdj)
    +getEdge(V vAdj)
    +numAdjVerts()
    +getAllAdjVerts()
    +getAllOutEdges()
}

MapVertex -- MapGraph

class Algorithms {
    +DepthFirstSearch(Graph<V, E> g, V vOrig, boolean[] visited, LinkedList<V> qdfs)
    +allPaths(Graph<V, E> g, V vOrig, V vDest, boolean[] visited,\n LinkedList<V> path, ArrayList<LinkedList<V>> paths)
    +shortestPathDijkstra(Graph<V, E> g, V vOrig, Comparator<E> ce, BinaryOperator<E> sum, E zero,\nboolean[] visited, V[] pathKeys, E[] dist)
    +shortestPath(Graph<V, E> g, V vOrig, V vDest,Comparator<E> ce, BinaryOperator<E> sum, E zero,\n LinkedList<V> shortPath)
    +initializePathDist(int numVerts, V[] pathKeys, E[] dist)
    +shortestPaths(Graph<V, E> g, V vOrig, Comparator<E> ce, BinaryOperator<E> sum, E zero,\n ArrayList<LinkedList<V>> paths, ArrayList<E> dists)
    +getPath(Graph<V, E> g, V vOrig, V vDest, V[] pathKeys, LinkedList<V> path)
    +nonNull(E value)
    +minimumSpanningTree(MapGraph<V, E> g, Comparator<E> ce, BinaryOperator<E> sum, E zero)
    +betweennessCentrality(Graph<V, E> graph)
    +dfsAlgorithm(Graph<V, E> g, V vOrig, V vDest, E maxWeight)
    +dfsAlgorithm(Graph<V, E> g, V vOrig, V vDest, E maxWeight, Set<V> visitedSet,\n LinkedList<V> path, ArrayList<LinkedList<V>> paths, Integer totalWeight)
    +shortestPathDijkstraWithAutonomy(Graph<V, E> g,E autonomia, V vOrig,\n Comparator<E> ce, BinaryOperator<E> sum, E zero, boolean[] visited,\n V[] pathKeys, E[] dist)
    +shortestPathWithAutonomy(Graph<V, E> g,E autonomy, V vOrig, V vDest,\nComparator<E> ce, BinaryOperator<E> sum, E zero, LinkedList<V> shortPath)
    +nearestNeighbor(Graph<V, E> g, V start, List<V> targetVertices,\n Comparator<E> ce, int autonomia , List<V> locaisDeCarregamento,\nList<E> distanceBeetweenLocals,List<Integer> totalDistanceList<Integer> tempoTotalDescarga)
}

Algorithms -- US_EI02_IdealVerticesForNHubs
Algorithms -- US_EI03_VehicleRouteAutonomy
Algorithms -- US_EI04_MinimumSpanningTree
Algorithms -- US_EI06_PossiblePathsBetweenPoints
Algorithms -- US_EI07_DeliveryRouteCalculator
Algorithms -- US_EI08_FindDeliveryCircuit
Algorithms -- US_EI09_HubNClusters

class CommonGraph {
    +isDirected()
    +numVertices()
    +vertices()
    +validVertex(V vert)
    +key(V vert)
    +vertex(int key)
    +vertex(Predicate<V> p)
    +numEdges()
    +copy(Graph<V, E> from, Graph<V, E> to)
    +equals(Object otherObj)
    +clone()
}

CommonGraph -- MapGraph

class Edge {
    +getVOrig()
    +getVDest()
    +getWeight()
    +setWeight(E weight)
}

Edge -- MapGraph

interface Graph {
    isDirected()
    numVertices()
    vertices()
    validVertex(V vert)
    adjVertices(V vert)
    edges()
    outgoingEdges(V vert)
    incomingEdges(V vert)
    addVertex(V vert)
    addEdge(V vOrig, V vDest, E weight)
}

Graph -- MapGraph
Graph -- CommonGraph
Graph -- Algorithms
Graph -- US_EI08_FindDeliveryCircuit

class ReadFiles {
    +importDist(String Distancias)
    +importLocal(String locais)
}




@enduml